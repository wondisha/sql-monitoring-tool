SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[CheckSQLBestPractices]
AS
BEGIN
    SET NOCOUNT ON;

    -- Debug logging table
    DECLARE @DebugLog TABLE (LogMessage NVARCHAR(MAX), LogTime DATETIME);

    -- Instance-level variables
    DECLARE @InstanceID INT, @DBID INT, @DBName NVARCHAR(128), @InstanceName NVARCHAR(100), @SQL NVARCHAR(MAX);
    DECLARE @RecommendedMaxDOP INT, @LogicalProcessorsPerNUMA INT, @NUMANodeCount INT, @TotalLogicalProcessors INT, @CurrentMaxDOP INT;
    DECLARE @CurrentCostThreshold INT, @RecommendedCostThreshold INT = 25;
    DECLARE @MaxServerMemory BIGINT, @MinServerMemory BIGINT, @TotalPhysicalMemory BIGINT;
    DECLARE @TempdbFileCount INT, @TempdbRecommendedFiles INT;
    DECLARE @LatestCompatLevel INT;

    -- Log start of execution
    INSERT INTO @DebugLog (LogMessage, LogTime) VALUES ('Starting SQL Best Practices Check', GETDATE());

    -- Retrieve a representative InstanceID and InstanceName
    SELECT TOP 1 @InstanceID = InstanceID, @InstanceName = Instance
    FROM Instances;

    -- Calculate recommended MaxDOP
    SELECT @NUMANodeCount = COUNT(DISTINCT node_id)
    FROM sys.dm_os_nodes
    WHERE node_state_desc = 'ONLINE' AND node_id < 64;

    SELECT @TotalLogicalProcessors = cpu_count
    FROM sys.dm_os_sys_info;

    SET @LogicalProcessorsPerNUMA = CASE WHEN @NUMANodeCount > 0 THEN @TotalLogicalProcessors / @NUMANodeCount ELSE @TotalLogicalProcessors END;
    SET @RecommendedMaxDOP = CASE WHEN @LogicalProcessorsPerNUMA <= 8 THEN @LogicalProcessorsPerNUMA ELSE 8 END;

    -- Get Current MaxDOP
    SELECT @CurrentMaxDOP = CAST(value_in_use AS INT)
    FROM sys.configurations
    WHERE Name = 'max degree of parallelism';

    -- Get Cost Threshold for Parallelism
    SELECT @CurrentCostThreshold = CAST(value_in_use AS INT)
    FROM sys.configurations
    WHERE name = 'cost threshold for parallelism';

    -- Get Memory Configuration
    SELECT @MaxServerMemory = CAST(value_in_use AS BIGINT)
    FROM sys.configurations
    WHERE name = 'max server memory (MB)';

    SELECT @MinServerMemory = CAST(value_in_use AS BIGINT)
    FROM sys.configurations
    WHERE name = 'min server memory (MB)';

    SELECT @TotalPhysicalMemory = total_physical_memory_kb / 1024
    FROM sys.dm_os_sys_memory;

    -- Get Tempdb File Count
    SELECT @TempdbFileCount = COUNT(*)
    FROM sys.master_files
    WHERE database_id = DB_ID('tempdb') AND type = 0;

    SET @TempdbRecommendedFiles = CASE WHEN @TotalLogicalProcessors <= 8 THEN @TotalLogicalProcessors ELSE 8 END;

    -- Determine latest compatibility level
    SELECT @LatestCompatLevel =
        CASE
            WHEN SERVERPROPERTY('ProductMajorVersion') = 16 THEN 160
            WHEN SERVERPROPERTY('ProductMajorVersion') = 15 THEN 150
            WHEN SERVERPROPERTY('ProductMajorVersion') = 14 THEN 140
            WHEN SERVERPROPERTY('ProductMajorVersion') = 13 THEN 130
            ELSE 120
        END;

    -- ====================================================================================================
    --- Instance-Level Checks (as in your original code)
    -- ====================================================================================================

    -- ... [All your instance-level checks remain unchanged here for brevity] ...

    -- ====================================================================================================
    --- Database-Level and Schema-Level Checks
    -- ====================================================================================================

    DECLARE db_cursor CURSOR LOCAL FAST_FORWARD FOR
    SELECT i.InstanceID, i.Instance, d.DBID, d.Name as DatabaseName
    FROM Instances i
    JOIN DBInfo d ON i.InstanceID = d.InstanceID
    WHERE d.Name NOT IN ('master', 'model', 'msdb', 'tempdb', 'Boo_util', 'Dummy', 'Dummy1', 'dummy2', 'DUMMY');

    OPEN db_cursor;
    FETCH NEXT FROM db_cursor INTO @InstanceID, @InstanceName, @DBID, @DBName;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        BEGIN TRY
            INSERT INTO @DebugLog (LogMessage, LogTime) VALUES ('Checking database: ' + @DBName, GETDATE());

            -- ========= DATABASE-LEVEL CHECKS =========
            -- ... [Your original database-level checks remain unchanged here for brevity] ...

            -- ========= SCHEMA-LEVEL CHECKS =========
            -- Only run for user DBs
            IF @DBName NOT IN ('master', 'model', 'msdb', 'tempdb')
            BEGIN
                SET @SQL = N'
                    USE ' + QUOTENAME(@DBName) + N';

                    -- Auto-Growth Settings
                    UPDATE bpm
                    SET Status = ''Resolved'', 
                        CurrentValue = CASE WHEN f.is_percent_growth = 1 THEN CAST(f.growth AS NVARCHAR(10)) + ''%'' 
                                           ELSE CAST(f.growth * 8 / 1024 AS NVARCHAR(10)) + '' MB'' END,
                        Notes = ''Auto-growth settings optimized.'', 
                        ResolvedDate = GETDATE()
                    FROM SQLBestPracticeMonitoring bpm
                    JOIN sys.master_files f ON (
                        (bpm.ObjectName = ''Data: '' + f.name AND f.type = 0) OR 
                        (bpm.ObjectName = ''Log: '' + f.name AND f.type = 1)
                    )
                    WHERE bpm.InstanceID = @InstanceID 
                      AND bpm.DBID = @DBID
                      AND bpm.BestPracticeName = ''AutoGrowthSettings''
                      AND bpm.Status = ''Unresolved''
                      AND f.database_id = DB_ID()
                      AND f.is_percent_growth = 0
                      AND ((f.type = 0 AND f.growth * 8 / 1024 >= 100) OR (f.type = 1 AND f.growth * 8 / 1024 >= 10));

                    INSERT INTO SQLBestPracticeMonitoring (InstanceID, DBID, InstanceName, DatabaseName, BestPracticeName, ObjectName, CurrentValue, RecommendedValue, Status, Notes)
                    SELECT @InstanceID, @DBID, @InstanceName, @DBName, ''AutoGrowthSettings'',
                           CASE WHEN f.type = 0 THEN ''Data: '' + f.name ELSE ''Log: '' + f.name END,
                           CASE WHEN f.is_percent_growth = 1 THEN CAST(f.growth AS NVARCHAR(10)) + ''%'' 
                                ELSE CAST(f.growth * 8 / 1024 AS NVARCHAR(10)) + '' MB'' END,
                           CASE WHEN f.type = 0 THEN ''Fixed MB (100+ MB)'' ELSE ''Fixed MB (10+ MB)'' END,
                           ''Unresolved'',
                           CASE WHEN f.is_percent_growth = 1 THEN ''Percentage growth causes performance issues. Use fixed MB growth instead.''
                                WHEN f.type = 0 AND f.growth * 8 / 1024 < 100 THEN ''Data file growth increment too small. Recommended: 100+ MB''
                                WHEN f.type = 1 AND f.growth * 8 / 1024 < 10 THEN ''Log file growth increment too small. Recommended: 10+ MB''
                                ELSE ''Growth setting needs optimization'' END
                    FROM sys.master_files f
                    WHERE f.database_id = DB_ID()
                      AND (f.is_percent_growth = 1
                           OR (f.type = 0 AND f.growth * 8 / 1024 < 100)
                           OR (f.type = 1 AND f.growth * 8 / 1024 < 10))
                      AND f.growth > 0
                      AND NOT EXISTS (
                          SELECT 1 FROM SQLBestPracticeMonitoring bpm
                          WHERE bpm.InstanceID = @InstanceID 
                            AND bpm.DBID = @DBID
                            AND bpm.BestPracticeName = ''AutoGrowthSettings''
                            AND bpm.ObjectName = CASE WHEN f.type = 0 THEN ''Data: '' + f.name ELSE ''Log: '' + f.name END
                            AND bpm.Status = ''Unresolved''
                      );

                    -- Database Compatibility Level
                    DECLARE @CurrentCompatLevel INT;
                    SELECT @CurrentCompatLevel = compatibility_level FROM sys.databases WHERE database_id = DB_ID();

                    UPDATE bpm
                    SET Status = ''Resolved'', 
                        CurrentValue = CAST(@CurrentCompatLevel AS NVARCHAR(10)),
                        Notes = ''Compatibility level is current.'', 
                        ResolvedDate = GETDATE()
                    FROM SQLBestPracticeMonitoring bpm
                    WHERE bpm.InstanceID = @InstanceID 
                      AND bpm.DBID = @DBID
                      AND bpm.BestPracticeName = ''CompatibilityLevel''
                      AND bpm.Status = ''Unresolved''
                      AND @CurrentCompatLevel >= @LatestCompatLevel;

                    INSERT INTO SQLBestPracticeMonitoring (InstanceID, DBID, InstanceName, DatabaseName, BestPracticeName, CurrentValue, RecommendedValue, Status, Notes)
                    SELECT @InstanceID, @DBID, @InstanceName, @DBName, ''CompatibilityLevel'',
                           CAST(@CurrentCompatLevel AS NVARCHAR(10)), 
                           CAST(@LatestCompatLevel AS NVARCHAR(10)), 
                           ''Unresolved'',
                           ''Database compatibility level should be at least '' + CAST(@LatestCompatLevel AS NVARCHAR(10)) + ''.''
                    WHERE @CurrentCompatLevel < @LatestCompatLevel
                      AND NOT EXISTS (
                          SELECT 1 FROM SQLBestPracticeMonitoring
                          WHERE InstanceID = @InstanceID AND DBID = @DBID AND BestPracticeName = ''CompatibilityLevel'' AND Status = ''Unresolved''
                      );
                ';

                EXEC sp_executesql 
                    @SQL, 
                    N'@InstanceID INT, @DBID INT, @InstanceName NVARCHAR(100), @DBName NVARCHAR(128), @LatestCompatLevel INT',
                    @InstanceID=@InstanceID, @DBID=@DBID, @InstanceName=@InstanceName, @DBName=@DBName, @LatestCompatLevel=@LatestCompatLevel;
            END

        END TRY
        BEGIN CATCH
            INSERT INTO @DebugLog (LogMessage, LogTime) 
            VALUES ('Error processing database: ' + ISNULL(@DBName, N'Unknown') + ' - ' + ERROR_MESSAGE(), GETDATE());
        END CATCH

        FETCH NEXT FROM db_cursor INTO @InstanceID, @InstanceName, @DBID, @DBName;
    END

    CLOSE db_cursor;
    DEALLOCATE db_cursor;

    -- Output Debug Log
    SELECT * FROM @DebugLog ORDER BY LogTime ASC;
END
GO
