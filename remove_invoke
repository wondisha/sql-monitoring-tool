# Function to parse connection string into server and database
function Parse-ConnectionString {
    param(
        [string]$ConnectionString
    )
    $connBuilder = New-Object System.Data.SqlClient.SqlConnectionStringBuilder($ConnectionString)
    [PSCustomObject]@{
        SqlInstance = $connBuilder.DataSource
        Database = $connBuilder.InitialCatalog
    }
}

$centralConnStr = "Server=CentralServer;Database=CentralDB;Integrated Security=True"
$centralConnInfo = Parse-ConnectionString -ConnectionString $centralConnStr

$query = @"
SELECT Username, InstanceName, DatabaseName
FROM TempAccessRequests
WHERE ExpiresAt <= GETDATE() AND AccessRevoked = 0
"@

# Use Invoke-DbaQuery for the initial fetch from the central server
$expired = Invoke-DbaQuery -SqlInstance $centralConnInfo.SqlInstance -Database $centralConnInfo.Database -Query $query

foreach ($row in $expired) {
    # Dynamically build and parse the target connection string for each instance
    $targetConnStr = "Server=$($row.InstanceName);Database=$($row.DatabaseName);Integrated Security=True"
    $targetConnInfo = Parse-ConnectionString -ConnectionString $targetConnStr

    $removeSql = @"
DECLARE @sql NVARCHAR(MAX) = N'';
SELECT @sql = @sql + 'EXEC sp_droprolemember N''' + r.name + ''', N''' + u.name + ''';'
FROM sys.database_principals u
JOIN sys.database_role_members rm ON u.principal_id = rm.member_principal_id
JOIN sys.database_principals r ON rm.role_principal_id = r.principal_id
WHERE u.name = N'$($row.Username)';
IF LEN(@sql) > 0 EXEC sp_executesql @sql;
"@
    try {
        # Use Invoke-DbaQuery to remove role members
        Invoke-DbaQuery -SqlInstance $targetConnInfo.SqlInstance -Database $targetConnInfo.Database -Query $removeSql

        # Optionally drop the user
        $dropUserSql = "IF EXISTS (SELECT 1 FROM sys.database_principals WHERE name = N'$($row.Username)') DROP USER [$($row.Username)];"
        # Use Invoke-DbaQuery to drop the user
        Invoke-DbaQuery -SqlInstance $targetConnInfo.SqlInstance -Database $targetConnInfo.Database -Query $dropUserSql

        $updateSql = "UPDATE TempAccessRequests SET AccessRevoked = 1 WHERE Username = '$($row.Username)' AND InstanceName = '$($row.InstanceName)' AND DatabaseName = '$($row.DatabaseName)' AND AccessRevoked = 0"
        # Use Invoke-DbaQuery to update the central table
        Invoke-DbaQuery -SqlInstance $centralConnInfo.SqlInstance -Database $centralConnInfo.Database -Query $updateSql

    } catch {
        Write-Host "Failed to revoke access for $($row.Username) on $($row.InstanceName)\$($row.DatabaseName): $($_.Exception.Message)"
    }
}
